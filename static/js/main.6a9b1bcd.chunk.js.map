{"version":3,"sources":["components/RevealedTile.js","components/FlaggedTile.js","components/SupermanMineTile.js","components/HiddenTile.js","components/Tile.js","helpers/gameStateActions.js","actions/gameState.js","actions/superman.js","components/Board.js","components/Superman.js","components/NewGameForm.js","components/OptionsBar.js","components/App.js","serviceWorker.js","helpers/gameStateReducer.js","reducers/gameState.js","reducers/superman.js","store.js","index.js"],"names":["RevealedTile","style","value","className","fontSize","FlaggedTile","handleClick","Card","raised","onClick","Icon","size","fitted","color","name","SupermanMineTile","HiddenTile","Tile","x","y","isFlagged","isRevealed","superman","makePlay","setFlag","endGame","useState","revealed","setRevealed","flagged","setFlagged","useEffect","hiddenStyle","backgroundColor","margin","height","e","shiftKey","setStyle","isValidCoord","potentialEmpty","board","revealAdjacentEmptyTiles","clickedTile","setFlags","visited","Set","newReveals","stack","length","current","pop","has","JSON","stringify","add","i","j","push","forEach","coord","Number","isInteger","initGame","rows","columns","mines","type","data","supermanActions","mapDispatchToProps","revealedTiles","flaggedTile","mineFlagged","removeFlag","unflaggedTile","mineUnflagged","connectedBoard","connect","state","gameState","props","remainingMines","gameWon","handlePlay","alert","handleFlag","console","log","remainingFlags","Cell","columnIndex","rowIndex","key","columnCount","rowCount","columnWidth","rowHeight","Math","max","window","document","body","clientHeight","width","min","clientWidth","colorTheme","connectedSuperman","Menu","Item","Button","toggle","active","themeInherit","connectedNewGameForm","setRows","setColumns","numOfMines","setMines","Map","set","setFlagMap","handleChange","setter","target","fontWeight","Form","Field","id","placeholder","onChange","floor","parseInt","icon","labelPosition","marginTop","OptionsBar","visible","setVisible","flagMap","get","Sidebar","as","animation","onHide","inverted","vertical","textAlign","marginLeft","marginRight","App","Boolean","location","hostname","match","randomInt","random","countSurroundingMines","surrMines","potentialMine","calcNumOfMines","cols","defaultMines","generateBoard","Array","randX","randY","Error","placeMines","fillBoard","defaultGame","defaultState","gameStateReducer","action","tile","newGame","newFlag","removedFlag","delete","remMines","supermanReducer","reducer","combineReducers","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a9b1bcd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst RevealedTile = ({ style, value }) => (\r\n  <div className='revealed-tile' style={{ ...style, fontSize: '150%' }}>\r\n    {value}\r\n  </div>\r\n)\r\n\r\n// const areEqual = (prevProps, nextProps) => {\r\n//   return prevProps.value === nextProps.value\r\n// }\r\n\r\n// export default React.memo(RevealedTile, areEqual)\r\nexport default RevealedTile","import React from 'react'\r\nimport { Icon, Card } from 'semantic-ui-react'\r\n\r\nconst FlaggedTile = ({ style, handleClick }) => (\r\n  <Card className='flagged-tile' raised style={style} onClick={handleClick}>\r\n    <Icon size='large' fitted={true} color='green' name='font awesome flag' />\r\n  </Card>\r\n)\r\n\r\n// const areEqual = (prevProps, nextProps) => {\r\n//   return prevProps.style.backgroundColor === nextProps.style.backgroundColor\r\n// }\r\n\r\n// export default React.memo(FlaggedTile, areEqual)\r\nexport default FlaggedTile","import React from 'react'\r\nimport { Icon, Card } from 'semantic-ui-react'\r\n\r\nconst SupermanMineTile = ({ style, handleClick }) => (\r\n  <Card className='superman-tile' raised style={style} onClick={handleClick}>\r\n    <Icon size='large' fitted={true} name='exclamation' color='red' />\r\n  </Card>\r\n)\r\n\r\n// const areEqual = (prevProps, nextProps) => {\r\n//   return prevProps.style.backgroundColor === nextProps.style.backgroundColor\r\n// }\r\n\r\n// export default React.memo(SupermanMineTile, areEqual)\r\nexport default SupermanMineTile","import React from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\n\r\nconst HiddenTile = ({ style, handleClick }) => (\r\n  <Card className='hidden-tile' raised style={style} onClick={handleClick} />\r\n  // {/* <div className='hidden-tile' style={style} onClick={handleClick}>\r\n  //   {'?'}\r\n  // </div> */}\r\n)\r\n\r\n// const areEqual = (prevProps, nextProps) => {\r\n//   // console.log(prevProps.style.backgroundColor === nextProps.style.backgroundColor);\r\n//   return prevProps.style.backgroundColor === nextProps.style.backgroundColor\r\n// }\r\n\r\n// export default React.memo(HiddenTile, areEqual)\r\nexport default HiddenTile","import React, { useState, useEffect } from \"react\"\r\nimport { Icon } from \"semantic-ui-react\"\r\nimport RevealedTile from \"./RevealedTile\"\r\nimport FlaggedTile from \"./FlaggedTile\"\r\nimport SupermanMineTile from \"./SupermanMineTile\"\r\nimport HiddenTile from \"./HiddenTile\"\r\n\r\nconst Tile = ({\r\n  x,\r\n  y,\r\n  value,\r\n  isFlagged,\r\n  isRevealed,\r\n  superman,\r\n  makePlay,\r\n  setFlag,\r\n  endGame,\r\n}) => {\r\n  const [revealed, setRevealed] = useState(isRevealed)\r\n  const [flagged, setFlagged] = useState(isFlagged)\r\n\r\n  useEffect(() => {\r\n    setRevealed(isRevealed);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isRevealed])\r\n\r\n  useEffect(() => {\r\n    setFlagged(isFlagged);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isFlagged])\r\n\r\n  const setStyle = () => {\r\n    switch (value) {\r\n      case 1:\r\n        return { color: \"blue\" }\r\n      case 2:\r\n        return { color: \"green\" }\r\n      case 3:\r\n        return { color: \"red\" }\r\n      default:\r\n        return {}\r\n    }\r\n  }\r\n\r\n  const hiddenStyle = {\r\n    backgroundColor: \"#B0B0B0\",\r\n    color: \"black\",\r\n    margin: 0,\r\n    height: '100%'\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n    // tile is not left clickable if its flagged\r\n    if (flagged && !e.shiftKey) return;\r\n    // tile is shift+left clickable if its hidden or flagged (flag or unflag)\r\n    if (e.shiftKey) return setFlag([x, y], value, flagged)\r\n    setRevealed(true)\r\n    // pass setrevealed to flip the tile back after the game restarts\r\n    // game is over if clicked tile is a mine\r\n    if (value === \"M\") return endGame(setRevealed)\r\n    // its a normal turn if none of the above occurs\r\n    makePlay([x, y], value)\r\n  }\r\n\r\n  const displayProperValue = () => {\r\n    if (value === \"M\") return <Icon fitted={true} size=\"large\" name=\"fire\" color='red' />\r\n    if (value === \"E\") return \" \"\r\n    return value;\r\n  }\r\n  if (revealed) {\r\n    return <RevealedTile value={displayProperValue()} style={setStyle()} />;\r\n  } else if (flagged) {\r\n    return (\r\n      <FlaggedTile style={hiddenStyle} handleClick={handleClick} />\r\n    )\r\n  } else if (value === \"M\" && superman) {\r\n    return (\r\n      <SupermanMineTile style={hiddenStyle} handleClick={handleClick} />\r\n    )\r\n  } else {\r\n    return (\r\n      <HiddenTile style={{ ...hiddenStyle, color: \"grey\" }} handleClick={handleClick} />\r\n    )\r\n  }\r\n}\r\n\r\n// const areEqual = (prevProps, nextProps) => {\r\n//   return prevProps.isRevealed === nextProps.isRevealed && prevProps.isFlagged === nextProps.isFlagged && prevProps.superman === nextProps.superman\r\n// }\r\n\r\n// export default React.memo(Tile, areEqual)\r\nexport default Tile;\r\n","const isValidCoord = (potentialEmpty, board) => {\r\n  return board[potentialEmpty[0]] && board[potentialEmpty[0]][potentialEmpty[1]]\r\n}\r\n\r\n// this DFS has to be implemented iteratively or else the browser will hate us for \"too much recursion\"\r\nexport const revealAdjacentEmptyTiles = (clickedTile, board, setFlags) => {\r\n  const visited = new Set()\r\n  const newReveals = []\r\n  const stack = [clickedTile]\r\n  while (stack.length > 0) {\r\n    const current = stack.pop()\r\n    // stringify because [] !== []\r\n    if (visited.has(JSON.stringify(current))) continue\r\n    visited.add(JSON.stringify(current))\r\n    const i = current[0]\r\n    const j = current[1]\r\n    visited.add(JSON.stringify(current))\r\n    // flagged tiles should be ignored even if they are not mines\r\n    if (setFlags.has(JSON.stringify(current))) continue\r\n    // if neighbor is empty, push onto stack to reveal all of it's adjacent cells\r\n    if (isValidCoord(current, board) && board[i][j] === 'E') {\r\n      newReveals.push(current)\r\n      const potentialCoords = [[i - 1, j - 1], [i - 1, j], [i, j - 1], [i + 1, j], [i, j + 1], [i + 1, j + 1]]\r\n      potentialCoords.forEach(coord => stack.push(coord))\r\n    // if neighbor is a number, reveal only it\r\n    } else if (isValidCoord(current, board) && Number.isInteger(board[i][j])) {\r\n      newReveals.push(current)\r\n    }\r\n  }\r\n  return newReveals\r\n}","import { revealAdjacentEmptyTiles } from '../helpers/gameStateActions'\r\n\r\nexport const initGame = (rows, columns, mines) => {\r\n  return {\r\n    type: 'INIT_GAME',\r\n    data: {\r\n      rows: rows,\r\n      columns: columns,\r\n      mines: mines,\r\n    }\r\n  }\r\n}\r\n\r\nexport const makePlay = (clickedTile, value, board, setFlags) => {\r\n  // clickedTile is of format [i, j]\r\n  // case where value === M is handled in gameOverReducer\r\n  if (value === 'E') {\r\n    return {\r\n      type: 'MAKE_PLAY',\r\n      data: {\r\n        revealedTiles: revealAdjacentEmptyTiles(clickedTile, board, setFlags),\r\n      }\r\n    }\r\n    // case where symbol is a number (reveal only this tile)\r\n  } else {\r\n    return {\r\n      type: 'MAKE_PLAY',\r\n      data: {\r\n        revealedTiles: [clickedTile]\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport const setFlag = (flaggedTile, value) => {\r\n  // flaggedTile is of format [i, j]\r\n  // isMine indicates whether flagged tile has mine underneath\r\n  return {\r\n    type: 'SET_FLAG',\r\n    data: {\r\n      mineFlagged: value === 'M',\r\n      coord: flaggedTile,\r\n    }\r\n  }\r\n}\r\n\r\nexport const removeFlag = (unflaggedTile, value) => {\r\n  // case where user unflagged an already flagged mine needs to be checked\r\n  return {\r\n    type: 'REMOVE_FLAG',\r\n    data: {\r\n      mineUnflagged: value === 'M',\r\n      coord: unflaggedTile,\r\n    }\r\n  }\r\n}","export const supermanActions = (value) => {\r\n  return (\r\n    value\r\n      ? { type: 'SUPERMAN_ON' }\r\n      : { type: 'SUPERMAN_OFF' }\r\n  )\r\n}","import React, { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport Tile from \"./Tile\"\r\nimport { makePlay, setFlag, removeFlag, initGame } from \"../actions/gameState\"\r\nimport { supermanActions } from \"../actions/superman\"\r\nimport { FixedSizeGrid as Grid } from \"react-window\"\r\n// import { Modal } from 'semantic-ui-react'\r\n\r\nconst Board = (props) => {\r\n  useEffect(() => {\r\n    if (props.gameState.remainingMines === 0) gameWon()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.gameState.remainingMines])\r\n\r\n  const handlePlay = (coord, value) => {\r\n    props.makePlay(\r\n      coord,\r\n      value,\r\n      props.gameState.board,\r\n      props.gameState.setFlags\r\n    )\r\n  }\r\n\r\n  const outOfFlags = () => {\r\n    alert(\"Hmm... seems like we are out of flags\")\r\n    // return (\r\n    // <Modal open={true}>\r\n    //   <p>\"Hmm... seems like we are out of flags\"</p>\r\n    // </Modal>\r\n    // )\r\n  }\r\n\r\n  const gameWon = () => {\r\n    alert(\"WOW YOU'VE ACTUALLY WON!!!\")\r\n    props.supermanActions(false)\r\n    props.initGame(props.gameState.rows, props.gameState.columns)\r\n  }\r\n\r\n  const handleFlag = (coord, value, flagged) => {\r\n    if (flagged) return props.removeFlag(coord, value)\r\n    console.log(props.gameState.remainingFlags)\r\n    if (props.gameState.remainingFlags === 0) return outOfFlags()\r\n    props.setFlag(coord, value)\r\n  }\r\n\r\n  const endGame = (setRevealed) => {\r\n    debugger\r\n    alert(\"You have been exploded!\")\r\n    // use setrevealed to flip the tile back after the game restarts\r\n    setRevealed(false)\r\n    props.supermanActions(false)\r\n    props.initGame(props.gameState.rows, props.gameState.columns)\r\n  }\r\n\r\n  const Cell = ({ columnIndex, rowIndex, style }) => (\r\n    <div\r\n      className={\r\n        columnIndex % 2\r\n          ? rowIndex % 2 === 0\r\n            ? \"GridItemOdd\"\r\n            : \"GridItemEven\"\r\n          : rowIndex % 2\r\n            ? \"GridItemOdd\"\r\n            : \"GridItemEven\"\r\n      }\r\n      style={style}\r\n    >\r\n      <Tile\r\n        x={rowIndex}\r\n        y={columnIndex}\r\n        key={`${rowIndex},${columnIndex}`}\r\n        value={props.gameState.board[rowIndex][columnIndex]}\r\n        isFlagged={props.gameState.setFlags.has(\r\n          JSON.stringify([rowIndex, columnIndex])\r\n        )}\r\n        isRevealed={props.gameState.revealedTiles.has(\r\n          JSON.stringify([rowIndex, columnIndex])\r\n        )}\r\n        superman={props.superman}\r\n        makePlay={handlePlay}\r\n        setFlag={handleFlag}\r\n        endGame={endGame}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <Grid\r\n      className=\"Grid\"\r\n      columnCount={props.gameState.columns}\r\n      rowCount={props.gameState.rows}\r\n      columnWidth={40}\r\n      rowHeight={40}\r\n      height={Math.max(40 * 20 + 5, window.document.body.clientHeight / 2)}\r\n      width={Math.max(Math.min(40 * props.gameState.columns + 5, window.document.body.clientWidth / 1.9), 300)}>\r\n      {Cell}\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  makePlay,\r\n  setFlag,\r\n  removeFlag,\r\n  initGame,\r\n  supermanActions,\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    gameState: state.gameState,\r\n    superman: state.superman,\r\n  }\r\n}\r\n\r\nconst connectedBoard = connect(mapStateToProps, mapDispatchToProps)(Board)\r\nexport default connectedBoard\r\n","import React from 'react'\r\nimport { Menu, Icon, Button } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\nimport { supermanActions } from '../actions/superman'\r\n\r\nconst colorTheme = { color: 'inherit' }\r\n\r\nconst Superman = props => {\r\n  return (\r\n    <Menu.Item>\r\n      <Button className='superman-button'\r\n        toggle active={props.superman}\r\n        style={{ backgroundColor: 'white', color: '#21ba45' }}\r\n        onClick={() => props.supermanActions(!props.superman)}>\r\n        <p style={colorTheme}>\r\n          Superman\r\n          <Icon name={'superpowers'} style={colorTheme} />\r\n        </p>\r\n      </Button>\r\n    </Menu.Item>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  supermanActions,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    superman: state.superman,\r\n  }\r\n}\r\n\r\nconst connectedSuperman = connect(mapStateToProps, mapDispatchToProps)(Superman)\r\nexport default connectedSuperman","import React, { useState, useEffect } from 'react'\r\nimport { Menu, Form, Button, Icon } from 'semantic-ui-react'\r\nimport { connect } from 'react-redux'\r\nimport { initGame } from '../actions/gameState'\r\nimport { supermanActions } from '../actions/superman'\r\n\r\nconst colorTheme = { color: 'white' }\r\nconst themeInherit = { color: 'inherit' }\r\n\r\nconst NewGameForm = props => {\r\n  const [rows, setRows] = useState(props.gameState.rows || '')\r\n  const [columns, setColumns] = useState(props.gameState.columns || '')\r\n  const [mines, setMines] = useState(props.gameState.numOfMines || '')\r\n\r\n  useEffect(() => {\r\n    setRows(props.gameState.rows)\r\n  }, [props.gameState.rows])\r\n\r\n  useEffect(() => {\r\n    setColumns(props.gameState.columns)\r\n  }, [props.gameState.columns])\r\n\r\n  useEffect(() => {\r\n    setMines(props.gameState.numOfMines)\r\n  }, [props.gameState.numOfMines])\r\n\r\n  useEffect(() => {\r\n    const remainingFlags = new Map()\r\n    remainingFlags.set('flags', props.gameState.remainingFlags)\r\n    props.setFlagMap(remainingFlags)\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.gameState.remainingFlags])\r\n\r\n  const handleChange = (e, setter) => {\r\n    if ((e.target.value <= 300)) setter(e.target.value)\r\n  }\r\n\r\n  const handleMineChange = (e) => {\r\n    if ((e.target.value < Math.floor(rows * columns) * 0.8)) setMines(e.target.value)\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n    // lets just prevent the player from trolling us\r\n    if (rows < 5) setRows(5)\r\n    if (columns < 5) setColumns(5)\r\n    if (mines > Math.floor(rows * columns * 0.8)) {\r\n      setMines(Math.floor((rows * columns) / 8))\r\n    }\r\n    props.supermanActions(false)\r\n    props.initGame(parseInt(rows || 5), parseInt(columns || 5), parseInt(mines || 3))\r\n  }\r\n\r\n  return (\r\n    <Menu.Item style={colorTheme}>\r\n    {/* while it makes sense to move the remaining flags paragraph to another component (or at least not this one), it will require\r\n    the other component to be connected just for a single paragraph element which makes no sense */}\r\n      <p style={{ fontWeight: 'bolder', color: '#21ba45' }}>New game</p>\r\n      <Form className='new-game-form'>\r\n        <Form.Field>\r\n          <label style={themeInherit}>Rows</label>\r\n          <input id='row-input' placeholder='5-300' value={rows} onChange={e => handleChange(e, setRows) } />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label style={themeInherit}>Columns</label>\r\n          <input id='column-input' placeholder='5-300' value={columns} onChange={e => handleChange(e, setColumns) } />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <label style={themeInherit}>Mines</label>\r\n          <input id='mine-input' placeholder='5-300' value={mines} onChange={handleMineChange} />\r\n        </Form.Field>\r\n      </Form>\r\n      <Button id='restart-button' type='submit' onClick={handleClick} icon labelPosition='right' style={{ backgroundColor: 'GhostWhite', color: 'black', marginTop: '1.5em' }}>\r\n        Restart\r\n        <Icon name='game' />\r\n      </Button>\r\n    </Menu.Item>\r\n  )\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  initGame, supermanActions\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    gameState: state.gameState,\r\n    superman: state.superman,\r\n  }\r\n}\r\n\r\nconst connectedNewGameForm = connect(mapStateToProps, mapDispatchToProps)(NewGameForm)\r\nexport default connectedNewGameForm","import React, { useState } from 'react'\r\nimport { Sidebar, Menu, Button, Icon } from 'semantic-ui-react'\r\nimport Superman from './Superman'\r\nimport NewGameForm from './NewGameForm'\r\n\r\nconst OptionsBar = () => {\r\n  const [visible, setVisible] = useState(false)\r\n  // this is used in the remaining mines indicator\r\n  // this is a hack indeed, but passing a number wouldn't work (immutable) and connecting an entire component\r\n  // to redux just to show a number is probably an overkill\r\n  const [flagMap, setFlagMap] = useState(new Map())\r\n\r\n  return (\r\n    <aside>\r\n      <Button\r\n        className='options-button'\r\n        toggle\r\n        active={visible}\r\n        onClick={() => setVisible(!visible)}\r\n        style={{ backgroundColor: 'white', color: '#21ba45' }}>\r\n        <h3>Options</h3>\r\n      </Button>\r\n      <h3 className='remaining-flags' style={{ color: '#21ba45' }}>\r\n        <Icon size='large' fitted={true} name='font awesome flag' /> {`x ${flagMap.get('flags')}`}\r\n      </h3>\r\n      <Sidebar\r\n        className='bar'\r\n        as={Menu}\r\n        animation='overlay'\r\n        onHide={() => setVisible(false)}\r\n        visible={visible}\r\n        inverted\r\n        vertical\r\n        width='thin'>\r\n        <Superman />\r\n        <NewGameForm setFlagMap={setFlagMap} />\r\n      </Sidebar>\r\n    </aside>\r\n  )\r\n}\r\n\r\nexport default OptionsBar","import React from \"react\"\r\nimport Board from \"./Board\"\r\nimport OptionsBar from \"./OptionsBar\"\r\nimport \"../css/grid-style.css\"\r\n\r\nconst style = {\r\n  textAlign: \"center\",\r\n  width: \"80%\",\r\n  marginLeft: \"auto\",\r\n  marginRight: \"auto\",\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <main style={style}>\r\n      <OptionsBar />\r\n      <Board />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","function randomInt(max) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nconst placeMines = (board, numOfMines) => {\r\n  const mines = new Set()\r\n  let i = 0\r\n  while (numOfMines !== 0) {\r\n    // generating random locations for mines could be O(infinity) but is good enough for this\r\n    const randX = randomInt(board.length)\r\n    const randY = randomInt(board[0].length)\r\n    if (!board[randX][randY]) {\r\n      // M stands for Mine\r\n      board[randX][randY] = 'M'\r\n      mines.add(JSON.stringify([randX, randY]))\r\n      numOfMines--\r\n    }\r\n    // make sure players' browser never freezes\r\n    if (i > board.length * board[0].length * 1000000) {\r\n      alert('An extremely uncommon stastical issue occured') \r\n      throw new Error()\r\n    }\r\n    i++\r\n  }\r\n  return mines // is used for superman mode\r\n}\r\n\r\nconst countSurroundingMines = (board, i, j) => {\r\n  let surrMines = 0\r\n  const potentialCoords = [[i - 1, j - 1], [i - 1, j], [i, j - 1], [i + 1, j], [i, j + 1], [i + 1, j + 1]]\r\n  potentialCoords.forEach(potentialMine => {\r\n    if (board[potentialMine[0]] && board[potentialMine[0]][potentialMine[1]] && board[potentialMine[0]][potentialMine[1]] === 'M') surrMines++\r\n  })\r\n  return (\r\n    surrMines > 0\r\n      ? surrMines // a number indicates the amount of surrounding mines\r\n      : 'E' // E stands for empty\r\n  )\r\n}\r\n\r\nconst fillBoard = board => {\r\n  for (let i = 0; i < board.length; i++) {\r\n    for (let j = 0; j < board[0].length; j++) {\r\n      if (board[i][j] === 'M') continue\r\n      board[i][j] = countSurroundingMines(board, i, j)\r\n    }\r\n  }\r\n}\r\n\r\nconst DEFAULT = 20\r\n\r\nexport const calcNumOfMines = (rows, cols) => Math.floor((rows * cols) / 8)\r\n\r\nconst defaultMines = calcNumOfMines(DEFAULT, DEFAULT)\r\n\r\nexport const generateBoard = (rows, columns, numOfMines) => {\r\n  const board = new Array(rows || DEFAULT);\r\n  for (let i = 0; i < rows; i++) {\r\n    board[i] = new Array(columns || DEFAULT)\r\n  }\r\n  const mines = placeMines(board, numOfMines || defaultMines)\r\n  fillBoard(board)\r\n  return [board, mines]\r\n}\r\n\r\n// this state might seem a bit too big, but board must be aware of the number of mines for it to be initialized\r\n// in turn, remaining flags is dependent on remaining mines, and remaining mines is dependent on number of mines\r\n// while it could make sense to separate some of these attributes into a different reducer, it feels like it would needlessly over complicate things\r\n\r\nconst defaultGame = generateBoard(DEFAULT, DEFAULT, defaultMines)\r\n\r\n// defaultGame[0] is the game board and defaultGame[1] is the set of mine coordinates\r\nexport const defaultState = {\r\n  rows: DEFAULT,\r\n  columns: DEFAULT,\r\n  numOfMines: defaultMines,\r\n  remainingFlags: defaultMines,\r\n  remainingMines: defaultMines,\r\n  board: defaultGame[0],\r\n  mines: defaultGame[1],\r\n  setFlags: new Set(),\r\n  revealedTiles: new Set(),\r\n}\r\n\r\n","import { defaultState, generateBoard, calcNumOfMines } from '../helpers/gameStateReducer'\r\n\r\nconst gameStateReducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    // when user plays\r\n    case 'MAKE_PLAY':\r\n      const newReveals = new Set(state.revealedTiles)\r\n      // needs to be json.stringified because [1] !== [1]\r\n      // javascript pls\r\n      action.data.revealedTiles.forEach(tile => newReveals.add(JSON.stringify(tile)))\r\n      return {\r\n        ...state,\r\n        revealedTiles: newReveals,\r\n      }\r\n    // when user sets board to a different size\r\n    case 'INIT_GAME':\r\n      const mines = action.data.mines || calcNumOfMines(action.data.rows, action.data.columns)\r\n      const newGame = generateBoard(action.data.rows, action.data.columns, mines)\r\n      return {\r\n        ...defaultState,\r\n        rows: action.data.rows,\r\n        columns: action.data.columns,\r\n        numOfMines: mines,\r\n        remainingFlags: mines,\r\n        remainingMines: mines,\r\n        board: newGame[0],\r\n        mines: newGame[1]\r\n      } \r\n    // when user places flag\r\n    case 'SET_FLAG':\r\n      let remainingMines = state.remainingMines\r\n      const newFlag = new Set(state.setFlags)\r\n      newFlag.add(JSON.stringify(action.data.coord))\r\n      // if user placed flag on a mine\r\n      if (action.data.mineFlagged) remainingMines--\r\n      console.log(state.remainingFlags);\r\n      return {\r\n        ...state,\r\n        remainingFlags: state.remainingFlags - 1,\r\n        remainingMines: remainingMines,\r\n        setFlags: newFlag,\r\n      }\r\n    case 'REMOVE_FLAG':\r\n      const removedFlag = new Set(state.setFlags)\r\n      removedFlag.delete(JSON.stringify(action.data.coord))\r\n      // no idea with neither remainingMines can be used nor can it be declared here\r\n      let remMines = state.remainingMines\r\n      if (action.data.mineUnflagged) remMines++\r\n      return {\r\n        ...state,\r\n        remainingFlags: state.remainingFlags + 1,\r\n        remainingMines: remMines,\r\n        setFlags: removedFlag,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default gameStateReducer","const supermanReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case 'SUPERMAN_ON':\r\n      return true\r\n    case 'SUPERMAN_OFF':\r\n      return false\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default supermanReducer","import { createStore, combineReducers } from 'redux'\r\nimport gameStateReducer from './reducers/gameState'\r\nimport supermanReducer from './reducers/superman'\r\n\r\nconst reducer = combineReducers({\r\n  gameState: gameStateReducer,\r\n  superman: supermanReducer,\r\n})\r\n\r\nconst store = createStore(reducer)\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}